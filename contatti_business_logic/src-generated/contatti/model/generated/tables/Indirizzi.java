/*
 * This file is generated by jOOQ.
 */
package contatti.model.generated.tables;


import contatti.model.generated.DefaultSchema;
import contatti.model.generated.tables.records.IndirizziRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indirizzi extends TableImpl<IndirizziRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>INDIRIZZI</code>
     */
    public static final Indirizzi INDIRIZZI = new Indirizzi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IndirizziRecord> getRecordType() {
        return IndirizziRecord.class;
    }

    /**
     * The column <code>INDIRIZZI.NOME</code>.
     */
    public final TableField<IndirizziRecord, String> NOME = createField(DSL.name("NOME"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>INDIRIZZI.NUMTELEFONO</code>.
     */
    public final TableField<IndirizziRecord, String> NUMTELEFONO = createField(DSL.name("NUMTELEFONO"), SQLDataType.CLOB, this, "");

    private Indirizzi(Name alias, Table<IndirizziRecord> aliased) {
        this(alias, aliased, null);
    }

    private Indirizzi(Name alias, Table<IndirizziRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>INDIRIZZI</code> table reference
     */
    public Indirizzi(String alias) {
        this(DSL.name(alias), INDIRIZZI);
    }

    /**
     * Create an aliased <code>INDIRIZZI</code> table reference
     */
    public Indirizzi(Name alias) {
        this(alias, INDIRIZZI);
    }

    /**
     * Create a <code>INDIRIZZI</code> table reference
     */
    public Indirizzi() {
        this(DSL.name("INDIRIZZI"), null);
    }

    public <O extends Record> Indirizzi(Table<O> child, ForeignKey<O, IndirizziRecord> key) {
        super(child, key, INDIRIZZI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Indirizzi as(String alias) {
        return new Indirizzi(DSL.name(alias), this);
    }

    @Override
    public Indirizzi as(Name alias) {
        return new Indirizzi(alias, this);
    }

    @Override
    public Indirizzi as(Table<?> alias) {
        return new Indirizzi(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Indirizzi rename(String name) {
        return new Indirizzi(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Indirizzi rename(Name name) {
        return new Indirizzi(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Indirizzi rename(Table<?> name) {
        return new Indirizzi(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
